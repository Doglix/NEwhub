local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
 
local Window = Rayfield:CreateWindow({
   Name = "Skibidi hub",
   Icon = 8853649548, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Hub by a ex SLC player",
   LoadingSubtitle = "by shhhhhhh",
   Theme = "Ocean", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
   DisableRayfieldPrompts =true,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Skibidi"
   },
 
   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
 
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Get a key broski",
      Subtitle = "Get a key npc",
      Note = "Ask the owner for a key", -- Use this to tell the user how to get a key
      FileName = "MonkeyBallz", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"ijhodfsauiasdhuidashdawuihdwauidwaohoduaiwhdawiuhdwauwadhiwduahadwuihawdoiuawhiuowdahdawiuhwdahawdouuawdiohioudawuihofuhio487484465645654456"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})
 
local MainTab = Window:CreateTab("HBE", 4483362458) -- Title, Image
 
local MainInput = MainTab:CreateInput({
   Name = "HBE X",
   CurrentValue = "4.521276473999023",
   PlaceholderText = "Input Placeholder",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
  -- Wait for the player and character to load
local Players = game:GetService("Players")
local player = Players.LocalPlayer
 
-- Function to update the Hitbox
local function updateHitbox(hitbox)
    if hitbox and hitbox:IsA("BasePart") then
        -- Change only the X size of the hitbox
        hitbox.Size = Vector3.new(Text, hitbox.Size.Y, hitbox.Size.Z)
        print("Hitbox X size updated to 10 while keeping other values unchanged")
    else
        warn("Hitbox not found or not a BasePart!")
    end
end
 
-- Handle character spawn
player.CharacterAdded:Connect(function(character)
    local hitbox = character:WaitForChild("Hitbox", 5) -- Wait up to 5 seconds for the part
    updateHitbox(hitbox)
end)
 
-- Handle already-existing character
if player.Character then
    local character = player.Character
    local hitbox = character:FindFirstChild("Hitbox")
    updateHitbox(hitbox)
end
 
   end,
})
 
local Input = MainTab:CreateInput({
   Name = "HBE Y",
   CurrentValue = "5.73",
   PlaceholderText = "Input Placeholder",
   RemoveTextAfterFocusLost = false,
   Flag = "Input2",
   Callback = function(Text)
   -- Wait for the player and character to load
local Players = game:GetService("Players")
local player = Players.LocalPlayer
 
-- Function to update the Hitbox
local function updateHitbox(hitbox)
    if hitbox and hitbox:IsA("BasePart") then
        -- Change only the Y size of the hitbox
        hitbox.Size = Vector3.new(hitbox.Size.X, Text, hitbox.Size.Z)
        print("Hitbox Y size updated to 10 while keeping other values unchanged")
    else
        warn("Hitbox not found or not a BasePart!")
    end
end
 
-- Handle character spawn
player.CharacterAdded:Connect(function(character)
    local hitbox = character:WaitForChild("Hitbox", 5) -- Wait up to 5 seconds for the part
    updateHitbox(hitbox)
end)
 
-- Handle already-existing character
if player.Character then
    local character = player.Character
    local hitbox = character:FindFirstChild("Hitbox")
    updateHitbox(hitbox)
end
 
   end,
})
 
local Input = MainTab:CreateInput({
   Name = "HBE Z",
   CurrentValue = "2.398",
   PlaceholderText = "Input Placeholder",
   RemoveTextAfterFocusLost = false,
   Flag = "Input3",
   Callback = function(Text)
-- Wait for the player and character to load
local Players = game:GetService("Players")
local player = Players.LocalPlayer
 
-- Function to update the Hitbox
local function updateHitbox(hitbox)
    if hitbox and hitbox:IsA("BasePart") then
        -- Change only the Z size of the hitbox
        hitbox.Size = Vector3.new(hitbox.Size.X, hitbox.Size.Y, Text)
        print("Hitbox Z size updated to 10 while keeping other values unchanged")
    else
        warn("Hitbox not found or not a BasePart!")
    end
end
 
-- Handle character spawn
player.CharacterAdded:Connect(function(character)
    local hitbox = character:WaitForChild("Hitbox", 5) -- Wait up to 5 seconds for the part
    updateHitbox(hitbox)
end)
 
-- Handle already-existing character
if player.Character then
    local character = player.Character
    local hitbox = character:FindFirstChild("Hitbox")
    updateHitbox(hitbox)
end
 
   end,
})
 
local Button = MainTab:CreateButton({
   Name = "Make hbe visible",
   Callback = function()
   local Players = game:GetService("Players")
local player = Players.LocalPlayer
 
if player and player.Character then
    local character = player.Character
    local hitbox = character:FindFirstChild("Hitbox")
 
    if hitbox and hitbox:IsA("BasePart") then
        hitbox.Transparency = 0.5
        print("Hitbox transparency set to 0.5")
    else
        warn("Hitbox not found or is not a BasePart!")
    end
else
    warn("Player character not found")
end
 
   end, 
}) 
 
local STab = Window:CreateTab("Ball and misc", 4483362458) -- Title, Image

local Button = STab:CreateButton({
   Name = "Ball TP (Key is B)",
   Callback = function()
   local UserInputService = game:GetService("UserInputService")
local player = game.Players.LocalPlayer
local junkFolder = game.Workspace:WaitForChild("Junk")
 
-- Function to teleport Football parts to the player's torso
local function teleportFootballParts()
    -- Find all parts named "Football" in the Junk folder
    for _, object in pairs(junkFolder:GetChildren()) do
        if object:IsA("Part") and object.Name == "Football" then
            -- Check if the player has a HumanoidRootPart or Torso and teleport the part there
            local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            local torso = player.Character and player.Character:FindFirstChild("Torso")
 
            if humanoidRootPart then
                object.CFrame = humanoidRootPart.CFrame
            elseif torso then
                object.CFrame = torso.CFrame
            end
        end
    end
end
 
-- Bind the "B" key to trigger teleportation
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
 
    if input.KeyCode == Enum.KeyCode.B then
        teleportFootballParts()
    end
end)
 
   end,
})

local Input = STab:CreateInput({
   Name = "Ball tp to others",
   CurrentValue = "TYPE USERNAME",
   PlaceholderText = "Input Placeholder",
   RemoveTextAfterFocusLost = false,
   Flag = "Input3",
   Callback = function(Text)
   local UserInputService = game:GetService("UserInputService")
local Workspace = game.Workspace  -- Ensuring correct reference to Workspace

local function getFootballParts()
    local junkFolder = Workspace:FindFirstChild("Junk")
    local footballParts = {}
    if junkFolder then
        for _, obj in ipairs(junkFolder:GetChildren()) do
            if obj:IsA("Part") and obj.Name == "Football" then
                table.insert(footballParts, obj)
            end
        end
    else
        warn("Junk folder not found in Workspace!")
    end
    return footballParts
end

local function getHumanoidRootPart()
    local targetModel = Workspace:FindFirstChild(Text) -- Ensuring correct spelling
    if targetModel then
        local humanoidRootPart = targetModel:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            return humanoidRootPart
        else
            warn("HumanoidRootPart not found in Player model!")
        end
    else
        warn("Player model not found in Workspace!")
    end
    return nil
end

local function moveFootballs()
    local footballParts = getFootballParts()
    local humanoidRootPart = getHumanoidRootPart()
    
    if humanoidRootPart then
        for _, football in ipairs(footballParts) do
            football.Position = humanoidRootPart.Position
            print("Moved " .. football.Name .. " to Ripzz_i's HumanoidRootPart position")
        end
    end
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.L then
        moveFootballs()
    end
end)

   end,
})

local Button = STab:CreateButton({
   Name = "Ball tp home: Key is M",
   Callback = function()
   -- Variables for workspace paths
local workspace = game:GetService("Workspace")
local junkFolder = workspace:FindFirstChild("Junk")
local stadiumFolder = workspace:FindFirstChild("Stadium")
local teamsFolder = stadiumFolder and stadiumFolder:FindFirstChild("Teams")
local homeFolder = teamsFolder and teamsFolder:FindFirstChild("Home")
local goalGroup = homeFolder and homeFolder:FindFirstChild("Goal")
local hitbox = goalGroup and goalGroup:FindFirstChild("Hitbox")

-- Validate all folders and objects exist
if not (junkFolder and hitbox) then
    warn("Required folders or parts not found in the workspace.")
    return
end

-- Function to detect Football part in the Junk folder
local function detectFootball()
    for _, item in pairs(junkFolder:GetChildren()) do
        if item:IsA("BasePart") and item.Name == "Football" then
            print("Detected a Football part.")
            return item -- Return the Football part
        end
    end
    print("No Football part found in Junk.")
    return nil
end

-- Function to teleport the Football part to the Hitbox
local function teleportFootballToHitbox()
    local football = detectFootball()
    if football and hitbox then
        football.CFrame = hitbox.CFrame -- Teleport the Football to the Hitbox
        print("Teleported the Football to the Hitbox.")
    elseif not football then
        warn("Football not found in Junk.")
    elseif not hitbox then
        warn("Hitbox not found.")
    end
end

-- Connect key press (M) to teleportation
local userInputService = game:GetService("UserInputService")
userInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.M then
        teleportFootballToHitbox()
    end
end)

-- Listen for new parts added to the Junk folder
junkFolder.ChildAdded:Connect(function(child)
    if child:IsA("BasePart") and child.Name == "Football" then
        print("New Football detected in Junk: " .. child.Name)
    end
end)

   end,
})

local Button = STab:CreateButton({
   Name = "Ball tp away: key is N",
   Callback = function()
   -- Variables for workspace paths
local workspace = game:GetService("Workspace")
local junkFolder = workspace:FindFirstChild("Junk")
local stadiumFolder = workspace:FindFirstChild("Stadium")
local teamsFolder = stadiumFolder and stadiumFolder:FindFirstChild("Teams")
local awayFolder = teamsFolder and teamsFolder:FindFirstChild("Away")
local goalGroup = awayFolder and awayFolder:FindFirstChild("Goal")
local hitbox = goalGroup and goalGroup:FindFirstChild("Hitbox")

-- Validate all folders and objects exist
if not (junkFolder and hitbox) then
    warn("Required folders or parts not found in the workspace.")
    return
end

-- Function to detect Football part in the Junk folder
local function detectFootball()
    for _, item in pairs(junkFolder:GetChildren()) do
        if item:IsA("BasePart") and item.Name == "Football" then
            print("Detected a Football part.")
            return item -- Return the Football part
        end
    end
    print("No Football part found in Junk.")
    return nil
end

-- Function to teleport the Football part to the Hitbox
local function teleportFootballToHitbox()
    local football = detectFootball()
    if football and hitbox then
        football.CFrame = hitbox.CFrame -- Teleport the Football to the Hitbox
        print("Teleported the Football to the Hitbox.")
    elseif not football then
        warn("Football not found in Junk.")
    elseif not hitbox then
        warn("Hitbox not found.")
    end
end

-- Connect key press (M) to teleportation
local userInputService = game:GetService("UserInputService")
userInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.N then
        teleportFootballToHitbox()
    end
end)

-- Listen for new parts added to the Junk folder
junkFolder.ChildAdded:Connect(function(child)
    if child:IsA("BasePart") and child.Name == "Football" then
        print("New Football detected in Junk: " .. child.Name)
    end
end)

   end,
})

local Button = STab:CreateButton({
   Name = "Pietarda",
   Callback = function()
-- Roblox Script
local userInputService = game:GetService("UserInputService")
local workspace = game:GetService("Workspace")
local localPlayer = game.Players.LocalPlayer
local junkFolder = workspace:WaitForChild("Junk")
local speed = 300
local isGPressed = false
local rightMouseHeld = false
local isEnabled = false -- Tracks whether the functionality is enabled

-- Function to detect key press and mouse button release
userInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    -- Check if G key is pressed to toggle the functionality
    if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.G then
        isEnabled = not isEnabled -- Toggle the state
        if isEnabled then
            print("Football moving is enabled")
        else
            print("Football moving is disabled")
        end
    end
end)

userInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    -- Check if right mouse button is released
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        rightMouseHeld = false

        -- If G is pressed and right mouse button is released, move the football(s)
        if isEnabled then
            -- Loop through all parts in the Junk folder
            for _, part in pairs(junkFolder:GetChildren()) do
                if part.Name == "Football" and part:IsA("BasePart") then
                    -- Move the football in the direction the camera is facing
                    local camera = workspace.CurrentCamera
                    local cameraLookVector = camera.CFrame.LookVector
                    part.Velocity = cameraLookVector * speed
                end
            end
        end
    end
end)

-- Detect right mouse button press
userInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        rightMouseHeld = true
    end
end)

   end,
})

local Input = STab:CreateInput({
   Name = "Custom power",
   CurrentValue = "nil",
   PlaceholderText = "Type how fast right click shot is",
   RemoveTextAfterFocusLost = false,
   Flag = "Input69",
   Callback = function(Nigga)
   local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local mouse = player:GetMouse()
local workspaceJunk = workspace:FindFirstChild("Junk")
local isActive = false -- Toggle state

-- Function to toggle the activation state
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.V then
        isActive = not isActive
        print("Football Launcher is now", isActive and "ON" or "OFF")
    end
end)

-- Function to detect and launch footballs
UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.UserInputType == Enum.UserInputType.MouseButton2 and isActive then -- Right-click released
        if workspaceJunk then
            for _, part in pairs(workspaceJunk:GetChildren()) do
                if part:IsA("BasePart") and part.Name == "Football" then
                    local direction = (workspace.CurrentCamera.CFrame.LookVector * Nigga) -- Adjust speed here
                    part.AssemblyLinearVelocity = Vector3.new(direction.X, 0, direction.Z) -- Moves straight forward
                end
            end
        end
    end
end)

-- Detect new parts being added
if workspaceJunk then
    workspaceJunk.ChildAdded:Connect(function(child)
        if child:IsA("BasePart") and child.Name == "Football" then
            print("New Football detected: " .. child.Name)
        end
    end)
end

   end,
})
